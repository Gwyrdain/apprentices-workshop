{"changed":true,"filter":false,"title":"area.rb","tooltip":"/app/models/area.rb","value":"require_relative '_import'\nrequire_relative '_translate'\nrequire_relative '_lookup'\n\nclass Area < ActiveRecord::Base\n  belongs_to :user\n  has_many :helps, dependent: :destroy\n  has_many :rooms, dependent: :destroy\n  has_many :objs, dependent: :destroy\n  has_many :mobiles, dependent: :destroy\n  has_many :area_strings, dependent: :destroy\n  has_many :resets, dependent: :destroy\n  has_many :shares, dependent: :destroy\n  \n  has_many :applies, through: :objs\n  has_many :oxdescs, through: :objs\n  has_many :shops, through: :mobiles\n  has_many :specials, through: :mobiles\n  has_many :exits, through: :rooms\n  has_many :rxdescs, through: :rooms\n  has_many :room_specials, through: :rooms\n  has_many :sub_resets, through: :resets\n  has_many :triggers, through: :rooms, :source => :triggers\n  \n  include Bitfields\n  \n  bitfield :misc_flags,\n                    2**0 => :share_publicly,\n                    2**1 => :use_rulers,\n                    2**2 => :show_formatted_blocks\n  \n  bitfield  :flags, 2**0 => :manmade,  # Hex 1\n                    2**1 => :city,     # Hex 2\n                    2**2 => :forest,   # Hex 4\n                    2**3 => :limited,  # Hex 8\n                    2**4 => :aerial,   # Hex 10\n                    2**5 => :reserved, # Hex 20\n                    2**6 => :arena,    # Hex 40\n                    2**7 => :quest,    # Hex 80\n                    2**8 => :novnum,   # Hex 100\n                    2**9 => :no_save   # Hex 200\n                    \n  bitfield :default_room_flags, \n                2**0 =>  :dark,          # Dec:          1 / Hex:         1\n                2**1 =>  :no_sleep,      # Dec:          2 / Hex:         2\n                2**2 =>  :no_mob,        # Dec:          4 / Hex:         4\n                2**3 =>  :indoors,       # Dec:          8 / Hex:         8\n#               2**4 =>  :flag,          # Dec:         16 / Hex:        10\n                2**5 =>  :foggy,         # Dec:         32 / Hex:        20\n                2**6 =>  :fire,          # Dec:         64 / Hex:        40\n                2**7 =>  :lava,          # Dec:        128 / Hex:        80\n#               2**8 =>  :flag,          # Dec:        256 / Hex:       100\n                2**9 =>  :private_room,  # Dec:        512 / Hex:       200\n                2**10 => :peaceful,      # Dec:       1024 / Hex:       400\n                2**11 => :solitary,      # Dec:       2048 / Hex:       800\n#               2**12 => :flag,          # Dec:       4096 / Hex:      1000\n                2**13 => :no_recall,     # Dec:       8192 / Hex:      2000\n                2**14 => :no_steal,      # Dec:      16384 / Hex:      4000\n                2**15 => :notrans,       # Dec:      32768 / Hex:      8000\n                2**16 => :no_spell,      # Dec:      65536 / Hex:     10000\n                2**17 => :seafloor,      # Dec:     131072 / Hex:     20000\n                2**18 => :no_fly,        # Dec:     262144 / Hex:     40000\n                2**19 => :holy_ground,   # Dec:     524288 / Hex:     80000\n                2**20 => :fly_ok,        # Dec:    1048576 / Hex:    100000\n                2**21 => :no_quest,      # Dec:    2097152 / Hex:    200000\n                2**22 => :no_item,       # Dec:    4194304 / Hex:    400000\n                2**23 => :no_vnum        # Dec:    8388608 / Hex:    800000\n#               2**24 => :flag,          # Dec:   16777216 / Hex:   1000000\n#               2**25 => :flag,          # Dec:   33554432 / Hex:   2000000\n#               2**26 => :flag,          # Dec:   67108864 / Hex:   4000000\n#               2**27 => :flag,          # Dec:  134217728 / Hex:   8000000\n#               2**28 => :flag,          # Dec:  268435456 / Hex:  10000000\n#               2**29 => :flag,          # Dec:  536870912 / Hex:  20000000\n#               2**30 => :flag,          # Dec: 1073741824 / Hex:  40000000\n#               2**31 => :flag,          # Dec: 2147483648 / Hex:  80000000\n#               2**32 => :flag,          # Dec: 4294967296 / Hex: 100000000\n\n  validates :name, length: { in: 1..20 }\n  validates :author, length: { in: 1..75 }\n\n  validates :vnum_qty, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n  validates :lowlevel, numericality: { only_integer: true, greater_than: 0, less_than: 51  }\n  validates :highlevel, numericality: { only_integer: true, greater_than: 0, less_than: 51  }\n  validates :default_terrain, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n  validates :area_number,  numericality: { only_integer: true, greater_than: 0 }\n  validates :user_id,  numericality: { only_integer: true, greater_than: 0 }\n  \n  validate do |area|\n    area.errors.add :base, \"Name may only contain US-ASCII characters.  Invalid characters: \" + area.name.remove(/[\\x0A\\x0D -~]/) if area.name.remove(/[\\x0A\\x0D -~]/).length > 0\n    area.errors.add :base, \"Author may only contain US-ASCII characters.  Invalid characters: \" + area.author.remove(/[\\x0A\\x0D -~]/) if area.author.remove(/[\\x0A\\x0D -~]/).length > 0\n  end\n\n  before_create :default_values\n  def default_values\n    self.flags ||= 0\n    self.vnum_qty ||= 100\n    self.misc_flags ||= 0\n    self.default_terrain ||= 0\n    self.default_room_flags ||= 0\n    return true\n  end\n  \n  def self.import(file, user_id)\n\n    range_low ||= 0\n    range_high ||= 0\n    author ||= ''\n    name ||= ''\n    flags ||= 0\n    \n    area_file = file.read.encode(universal_newline: true).gsub(/\\s*\\n/,\"\\n\")\n    #lines = area_file.readlines.map(&:chomp) #readlines from file & removes newline symbol\n\n    header_v1 = 'No Format 1 Area Header'\n    header_v2 = 'No Format 2 Area Header'\n    mobiles_block = 'No Mobiles Block'\n    objects_block = 'No Objects Block'\n    rooms_block = 'No Rooms Block'\n    strings_block = 'No Strings Block'\n    resets_block = 'No Resets Block'\n    shops_block = 'No Shops Block'\n    specials_block = 'No Specials Block'\n    rspecs_block = 'No Room Specials Block'\n    triggers_block = 'No Triggers Block'\n    header_info = ''\n    \n    # Parse v1 Header Info\n    if area_file.match(/^#AREA.*~.*?\\n/)\n      header_v1 = area_file.match(/^#AREA.*~.*?\\n/)\n      header_info = parse_area_header_v1(header_v1[0], user_id)\n    end\n    # Parse v2 Header Info\n    if area_file.match(/^#AREA.*?\\nEnd/m)\n      header_v2 = area_file.match(/^#AREA.*?\\nEnd/m)\n      header_info = parse_area_header_v2(header_v2[0], user_id)\n    end\n    # Parse the Mobiles Block\n    if area_file.match(/^#MOBILES\\n#(.*?)\\n#0/m)\n      mobiles_block = parse_mobiles( area_file.match(/^#MOBILES\\n#(.*?)\\n#0/m)[1] )\n    end\n    # Parse the Objects Block\n    if area_file.match(/^#OBJECTS\\n#.*?\\n#0/m)\n      objects_block = parse_objects( area_file.match(/^#OBJECTS\\n#(.*?)\\n#0/m)[1] )\n    end\n    \n    \n    \n    if area_file.match(/^#ROOMS\\n#.*?\\n#0/m)\n      rooms_block = area_file.match(/^#ROOMS\\n#(.*?)\\n#0/m)\n    end\n    if area_file.match(/^#STRINGS\\n#.*?\\n#0/m)\n      strings_block = area_file.match(/^#STRINGS\\n#(.*?)\\n#0/m)\n    end\n    if area_file.match(/^#RESETS\\n.*?\\nS/m)\n      resets_block = area_file.match(/^#RESETS\\n.*?\\nS/m)\n    end\n    if area_file.match(/^#SHOPS\\n.*?\\n0/m)\n      shops_block = area_file.match(/^#SHOPS\\n.*?\\n0/m)\n    end\n    if area_file.match(/^#SPECIALS\\n.*?\\nS/m)\n      specials_block = area_file.match(/^#SPECIALS\\n.*?\\nS/m)\n    end\n    if area_file.match(/^#RSPECS\\n.*?\\nS/m)\n      rspecs_block = area_file.match(/^#RSPECS\\n.*?\\nS/m)\n    end\n    if area_file.match(/^#TRIGGERS\\n.*?\\nS/m)\n      triggers_block = area_file.match(/^#TRIGGERS\\n.*?\\nS/m)\n    end\n\n    return \"#{header_info}<hr>#{header_v1}<hr>#{header_v2}<hr>#{mobiles_block}<hr>#{objects_block}<hr>\" <<\n           \"#{rooms_block}<hr>#{strings_block}<hr>#{resets_block}<hr>#{shops_block}\" <<\n           \"#{specials_block}<hr>#{rspecs_block}<hr>#{triggers_block}<hr><b>EOF</b>\"\n\n  end\n  \n  def nextroomvnum\n    $i = 0\n    while self.rooms.exists?(:vnum => $i)  do\n        $i +=1\n    end\n    return $i\n  end\n  \n  def nextobjvnum\n    $i = 0\n    while self.objs.exists?(:vnum => $i)  do\n        $i +=1\n    end\n    return $i\n  end\n\n  def nextmobilevnum\n    $i = 0\n    while self.mobiles.exists?(:vnum => $i)  do\n        $i +=1\n    end\n    return $i\n  end\n\n  def nextarea_stringvnum\n    $i = 0\n    while self.area_strings.exists?(:vnum => $i)  do\n        $i +=1\n    end\n    return $i\n  end\n  \n  def flags_as_hex\n    #return self.flags.to_s(16).upper ... trying new\n    return \"%X\" % self.flags\n  end\n  \n  def flags_as_string\n    $flags_string = ''\n    $flags_string = $flags_string + ' MANMADE' if self.manmade\n    $flags_string = $flags_string + ' CITY' if self.city\n    $flags_string = $flags_string + ' FOREST' if self.forest\n    $flags_string = $flags_string + ' LIMITED' if self.limited\n    $flags_string = $flags_string + ' AERIAL' if self.aerial\n    $flags_string = $flags_string + ' RESERVED' if self.reserved\n    $flags_string = $flags_string + ' ARENA' if self.arena\n    $flags_string = $flags_string + ' QUEST' if self.quest\n    $flags_string = $flags_string + ' NOVNUM' if self.novnum\n    $flags_string = $flags_string + ' NOSAVE' if self.no_save\n    return $flags_string\n  end\n  \n  def door_reset_count\n    i = 0\n    self.rooms.each do |room|\n\n      room.exits.each do |exit|\n        i = i + 1 if exit.has_reset?\n      end\n\n    end\n    return i\n  end\n  \n  def shared_with?(this_user)\n#   if ( this_user.id == self.user_id || self.share_publicly? || this_user.is_admin? || self.shares.exists?(:user_id => this_user.id ) )\n    if self.shares.exists?(:user_id => this_user.id )\n      return true\n    else\n      return false\n    end\n  end\n\n  def my_area\n    return self\n  end\n  \n  def last_updated?\n    $latest_update = self.updated_at\n    $update = $latest_update\n    \n    $update = self.area_strings.order(updated_at: :desc).first.updated_at if self.area_strings.count > 0\n    $latest_update = $update           if $update > $latest_update\n    \n    $update = self.helps.order(updated_at: :desc).first.updated_at if self.helps.count > 0\n    $latest_update = $update           if $update > $latest_update\n    \n    $update = self.rooms.order(updated_at: :desc).first.updated_at if self.rooms.count > 0\n    $latest_update = $update           if $update > $latest_update\n    \n    $update = self.mobiles.order(updated_at: :desc).first.updated_at if self.mobiles.count > 0\n    $latest_update = $update           if $update > $latest_update\n    \n    $update = self.objs.order(updated_at: :desc).first.updated_at if self.objs.count > 0\n    $latest_update = $update           if $update > $latest_update\n    \n    $update = self.resets.order(updated_at: :desc).first.updated_at if self.resets.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.shops.order(updated_at: :desc).first.updated_at if self.shops.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.specials.order(updated_at: :desc).first.updated_at if self.specials.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.room_specials.order(updated_at: :desc).first.updated_at if self.room_specials.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.sub_resets.order(updated_at: :desc).first.updated_at if self.sub_resets.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.triggers.order(updated_at: :desc).first.updated_at if self.triggers.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.applies.order(updated_at: :desc).first.updated_at if self.applies.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.exits.order(updated_at: :desc).first.updated_at if self.exits.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.rxdescs.order(updated_at: :desc).first.updated_at if self.rxdescs.count > 0\n    $latest_update = $update           if $update > $latest_update\n\n    $update = self.oxdescs.order(updated_at: :desc).first.updated_at if self.oxdescs.count > 0\n    $latest_update = $update           if $update > $latest_update\n    \n    return $latest_update\n  end\n  \n  def self.import(file, user_id)\n\n    range_low ||= 0\n    range_high ||= 0\n    author ||= ''\n    name ||= ''\n    flags ||= 0\n    \n    area_file = file.read.encode(universal_newline: true).gsub(/\\s*\\n/,\"\\n\")\n\n    mobiles_block = nil\n    objects_block = nil\n    rooms_block = nil\n    \n    strings_block = 'No Strings Block'\n    resets_block = 'No Resets Block'\n    shops_block = 'No Shops Block'\n    specials_block = 'No Specials Block'\n    rspecs_block = 'No Room Specials Block'\n    triggers_block = 'No Triggers Block'\n    header_info = nil\n    \n    if area_file.match(/^#AREA.*~.*?\\n/) # v1 Header\n      header_info = parse_area_header_v1( area_file.match(/^#AREA.*~.*?\\n/)[0] )\n    end\n    \n    if area_file.match(/^#AREA.*?\\nEnd/m) # v2 Header\n      header_info = parse_area_header_v2( area_file.match(/^#AREA.*?\\nEnd/m)[0] )\n    end\n\n    if area_file.match(/^#MOBILES\\n#(.*?)\\n#0/m)\n      mobiles_block = parse_mobiles( area_file.match(/^#MOBILES\\n#(.*?)\\n#0/m)[1] )\n    end\n\n    if area_file.match(/^#OBJECTS\\n#.*?\\n#0/m)\n      objects_block = parse_objects( area_file.match(/^#OBJECTS\\n#(.*?)\\n#0/m)[1] )\n    end\n    \n    if area_file.match(/^#ROOMS\\n#.*?\\n#0/m)\n      rooms_block = parse_rooms( area_file.match(/^#ROOMS\\n#(.*?)\\n#0/m)[1] )\n    end\n    \n    # --- BOOKMARK ---  Items below not started.\n    if area_file.match(/^#STRINGS\\n#.*?\\n#0/m)\n      strings_block = area_file.match(/^#STRINGS\\n#(.*?)\\n#0/m)\n    end\n    if area_file.match(/^#RESETS\\n.*?\\nS/m)\n      resets_block = area_file.match(/^#RESETS\\n.*?\\nS/m)\n    end\n    if area_file.match(/^#SHOPS\\n.*?\\n0/m)\n      shops_block = area_file.match(/^#SHOPS\\n.*?\\n0/m)\n    end\n    if area_file.match(/^#SPECIALS\\n.*?\\nS/m)\n      specials_block = area_file.match(/^#SPECIALS\\n.*?\\nS/m)\n    end\n    if area_file.match(/^#RSPECS\\n.*?\\nS/m)\n      rspecs_block = area_file.match(/^#RSPECS\\n.*?\\nS/m)\n    end\n    if area_file.match(/^#TRIGGERS\\n.*?\\nS/m)\n      triggers_block = area_file.match(/^#TRIGGERS\\n.*?\\nS/m)\n    end\n\n    return \"<h1>Header</h1>#{format_hash(header_info) if header_info != nil}<hr>\" <<\n           \"<h1>Mobiles</h1>#{format_hash(mobiles_block) if mobiles_block != nil}<hr>\" <<\n           \"<h1>Objects</h1>#{format_hash(objects_block) if objects_block != nil}<hr>\" <<\n           \"<h1>Rooms (WIP)</h1>#{format_hash(rooms_block) if rooms_block != nil}<hr>\" #<<\n           #\"#{rooms_block}<hr>#{strings_block}<hr>#{resets_block}<hr>#{shops_block}\" <<\n           #\"#{specials_block}<hr>#{rspecs_block}<hr>#{triggers_block}<hr><b>EOF</b>\"\n\n  end\n  \nend\n\ndef format_hash(h)\n  $formatted_hash = ''\n  \n    h.each do |item|\n      $formatted_hash = $formatted_hash + \"<b>#{item[0]}:</b> \"\n      if item[1].class.name == \"Hash\"\n        $formatted_hash = $formatted_hash + \"<table border=\\\"1\\\"><tr><td>#{format_hash(item[1])}</td></tr></table>\"\n      else\n        $formatted_hash = $formatted_hash + \"#{item[1]}<br>\"\n      end\n    end\n  \n  return $formatted_hash\nend\n\ndef parse_rooms(rooms_block)\n  rooms_info = Hash.new\n  i = 1\n  \n  rooms = rooms_block.split(\"#\").map(&:strip)\n  \n  rooms.each do |room|\n    m = room.match(/^(\\d+)\\n(.*)~\\n([^~]*)\\n~\\n(\\d*) ([0-9|]*) (\\d*)/)\n    room_info = Hash.new\n    room_info[\"vnum\"]        = m[1].to_i\n    room_info[\"name\"]        = m[2].strip\n    room_info[\"description\"] = m[3].strip\n    room_info[\"area_number\"] = m[4].to_i\n    room_info[\"room_flags\"]  = read_flags( m[5].strip )\n    room_info[\"terrain\"]     = m[6].to_i\n    \n    if room.match(/^E$/) # any extra descriptions?\n      room_info[\"extra_descs\"] = parse_extra_descs( room.split(/^E$/).map(&:strip) )\n    end\n    \n    if room.match(/^D\\d$/) # any exits?\n      #room_info[\"exits\"] = parse_exits( room.split(/^D$/).map(&:strip) )\n    end\n    \n    rooms_info[i] = room_info\n    i = i + 1\n  end\n  \n  return rooms_info\nend\n","undoManager":{"mark":97,"position":100,"stack":[[{"start":{"row":418,"column":36},"end":{"row":418,"column":37},"action":"insert","lines":["t"],"id":5354}],[{"start":{"row":418,"column":37},"end":{"row":418,"column":38},"action":"insert","lines":["s"],"id":5355}],[{"start":{"row":419,"column":17},"end":{"row":419,"column":28},"action":"remove","lines":["extra_descs"],"id":5356},{"start":{"row":419,"column":17},"end":{"row":419,"column":18},"action":"insert","lines":["e"]}],[{"start":{"row":419,"column":18},"end":{"row":419,"column":19},"action":"insert","lines":["x"],"id":5357}],[{"start":{"row":419,"column":19},"end":{"row":419,"column":20},"action":"insert","lines":["i"],"id":5358}],[{"start":{"row":419,"column":20},"end":{"row":419,"column":21},"action":"insert","lines":["t"],"id":5359}],[{"start":{"row":419,"column":21},"end":{"row":419,"column":22},"action":"insert","lines":["s"],"id":5360}],[{"start":{"row":419,"column":33},"end":{"row":419,"column":34},"action":"insert","lines":["e"],"id":5361}],[{"start":{"row":419,"column":34},"end":{"row":419,"column":35},"action":"insert","lines":["x"],"id":5362}],[{"start":{"row":419,"column":35},"end":{"row":419,"column":36},"action":"insert","lines":["i"],"id":5363}],[{"start":{"row":419,"column":36},"end":{"row":419,"column":37},"action":"insert","lines":["t"],"id":5364}],[{"start":{"row":419,"column":37},"end":{"row":419,"column":38},"action":"insert","lines":["s"],"id":5365}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["e"],"id":5366}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["x"],"id":5367}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["t"],"id":5368}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["r"],"id":5369}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["a"],"id":5370}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["_"],"id":5371}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["d"],"id":5372}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["e"],"id":5373}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["s"],"id":5374}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["c"],"id":5375}],[{"start":{"row":419,"column":38},"end":{"row":419,"column":39},"action":"remove","lines":["s"],"id":5376}],[{"start":{"row":429,"column":0},"end":{"row":437,"column":3},"action":"remove","lines":["def sum_piped( piped_numbers )","  total = 0","  number_list = piped_numbers.split(\"|\").map(&:strip)","  number_list.each do |number|","    total = total + number.to_i","  end","","  return total","end"],"id":5377}],[{"start":{"row":428,"column":0},"end":{"row":429,"column":0},"action":"remove","lines":["",""],"id":5378}],[{"start":{"row":427,"column":3},"end":{"row":428,"column":0},"action":"remove","lines":["",""],"id":5379}],[{"start":{"row":419,"column":53},"end":{"row":419,"column":54},"action":"remove","lines":["E"],"id":5380},{"start":{"row":419,"column":53},"end":{"row":419,"column":54},"action":"insert","lines":["D"]}],[{"start":{"row":427,"column":3},"end":{"row":428,"column":0},"action":"insert","lines":["",""],"id":5381}],[{"start":{"row":428,"column":0},"end":{"row":429,"column":0},"action":"insert","lines":["",""],"id":5382}],[{"start":{"row":429,"column":0},"end":{"row":438,"column":3},"action":"insert","lines":["","def read_flags( flags )","  total = 0","  number_list = piped_numbers.split(\"|\").map(&:strip)","  number_list.each do |number|","    total = total + number.to_i","  end","","  return total","end"],"id":5383}],[{"start":{"row":438,"column":3},"end":{"row":439,"column":0},"action":"insert","lines":["",""],"id":5384}],[{"start":{"row":439,"column":0},"end":{"row":440,"column":0},"action":"insert","lines":["",""],"id":5385}],[{"start":{"row":440,"column":0},"end":{"row":444,"column":7},"action":"insert","lines":["    if m[5].match(/|/)","      room_info[\"room_flags\"]  = sum_piped( m[5].strip )","    else","      room_info[\"room_flags\"]  = m[5].to_i","    end"],"id":5386}],[{"start":{"row":430,"column":23},"end":{"row":431,"column":0},"action":"insert","lines":["",""],"id":5387},{"start":{"row":431,"column":0},"end":{"row":431,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":431,"column":2},"end":{"row":432,"column":0},"action":"insert","lines":["",""],"id":5388},{"start":{"row":432,"column":0},"end":{"row":432,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":431,"column":2},"end":{"row":432,"column":0},"action":"insert","lines":["",""],"id":5389},{"start":{"row":432,"column":0},"end":{"row":432,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":432,"column":2},"end":{"row":432,"column":20},"action":"insert","lines":["if m[5].match(/|/)"],"id":5390}],[{"start":{"row":432,"column":5},"end":{"row":432,"column":9},"action":"remove","lines":["m[5]"],"id":5391},{"start":{"row":432,"column":5},"end":{"row":432,"column":10},"action":"insert","lines":["flags"]}],[{"start":{"row":444,"column":0},"end":{"row":447,"column":7},"action":"remove","lines":["      room_info[\"room_flags\"]  = sum_piped( m[5].strip )","    else","      room_info[\"room_flags\"]  = m[5].to_i","    end"],"id":5392}],[{"start":{"row":443,"column":22},"end":{"row":444,"column":0},"action":"remove","lines":["",""],"id":5393}],[{"start":{"row":443,"column":21},"end":{"row":443,"column":22},"action":"remove","lines":[")"],"id":5394}],[{"start":{"row":443,"column":4},"end":{"row":443,"column":21},"action":"remove","lines":["if m[5].match(/|/"],"id":5395}],[{"start":{"row":443,"column":2},"end":{"row":443,"column":4},"action":"remove","lines":["  "],"id":5396}],[{"start":{"row":443,"column":0},"end":{"row":443,"column":2},"action":"remove","lines":["  "],"id":5397}],[{"start":{"row":442,"column":0},"end":{"row":443,"column":0},"action":"remove","lines":["",""],"id":5398}],[{"start":{"row":441,"column":3},"end":{"row":442,"column":0},"action":"remove","lines":["",""],"id":5399}],[{"start":{"row":432,"column":21},"end":{"row":432,"column":22},"action":"insert","lines":["\\"],"id":5400}],[{"start":{"row":432,"column":21},"end":{"row":432,"column":22},"action":"remove","lines":["\\"],"id":5401}],[{"start":{"row":432,"column":21},"end":{"row":433,"column":0},"action":"insert","lines":["",""],"id":5402},{"start":{"row":433,"column":0},"end":{"row":433,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":433,"column":2},"end":{"row":433,"column":4},"action":"remove","lines":["  "],"id":5403}],[{"start":{"row":433,"column":0},"end":{"row":433,"column":2},"action":"remove","lines":["  "],"id":5404}],[{"start":{"row":433,"column":0},"end":{"row":436,"column":7},"action":"insert","lines":["      room_info[\"room_flags\"]  = sum_piped( m[5].strip )","    else","      room_info[\"room_flags\"]  = m[5].to_i","    end"],"id":5405}],[{"start":{"row":433,"column":0},"end":{"row":433,"column":2},"action":"remove","lines":["  "],"id":5406},{"start":{"row":434,"column":0},"end":{"row":434,"column":2},"action":"remove","lines":["  "]},{"start":{"row":435,"column":0},"end":{"row":435,"column":2},"action":"remove","lines":["  "]},{"start":{"row":436,"column":0},"end":{"row":436,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":438,"column":0},"end":{"row":442,"column":5},"action":"remove","lines":["  total = 0","  number_list = piped_numbers.split(\"|\").map(&:strip)","  number_list.each do |number|","    total = total + number.to_i","  end"],"id":5407}],[{"start":{"row":433,"column":54},"end":{"row":434,"column":0},"action":"insert","lines":["",""],"id":5408},{"start":{"row":434,"column":0},"end":{"row":434,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":434,"column":4},"end":{"row":435,"column":0},"action":"insert","lines":["",""],"id":5409},{"start":{"row":435,"column":0},"end":{"row":435,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":435,"column":2},"end":{"row":435,"column":4},"action":"remove","lines":["  "],"id":5410}],[{"start":{"row":435,"column":0},"end":{"row":435,"column":2},"action":"remove","lines":["  "],"id":5411}],[{"start":{"row":435,"column":0},"end":{"row":439,"column":5},"action":"insert","lines":["  total = 0","  number_list = piped_numbers.split(\"|\").map(&:strip)","  number_list.each do |number|","    total = total + number.to_i","  end"],"id":5412}],[{"start":{"row":439,"column":5},"end":{"row":440,"column":0},"action":"insert","lines":["",""],"id":5413},{"start":{"row":440,"column":0},"end":{"row":440,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":435,"column":0},"end":{"row":435,"column":2},"action":"insert","lines":["  "],"id":5414},{"start":{"row":436,"column":0},"end":{"row":436,"column":2},"action":"insert","lines":["  "]},{"start":{"row":437,"column":0},"end":{"row":437,"column":2},"action":"insert","lines":["  "]},{"start":{"row":438,"column":0},"end":{"row":438,"column":2},"action":"insert","lines":["  "]},{"start":{"row":439,"column":0},"end":{"row":439,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":442,"column":4},"end":{"row":442,"column":5},"action":"insert","lines":["r"],"id":5415}],[{"start":{"row":442,"column":5},"end":{"row":442,"column":6},"action":"insert","lines":["e"],"id":5416}],[{"start":{"row":442,"column":6},"end":{"row":442,"column":7},"action":"insert","lines":["t"],"id":5417}],[{"start":{"row":442,"column":7},"end":{"row":442,"column":8},"action":"insert","lines":["u"],"id":5418}],[{"start":{"row":442,"column":8},"end":{"row":442,"column":9},"action":"insert","lines":["r"],"id":5419}],[{"start":{"row":442,"column":9},"end":{"row":442,"column":10},"action":"insert","lines":["n"],"id":5420}],[{"start":{"row":442,"column":10},"end":{"row":442,"column":11},"action":"insert","lines":[" "],"id":5421}],[{"start":{"row":442,"column":11},"end":{"row":442,"column":16},"action":"insert","lines":["flags"],"id":5422}],[{"start":{"row":442,"column":16},"end":{"row":442,"column":52},"action":"remove","lines":["room_info[\"room_flags\"]  = m[5].to_i"],"id":5423}],[{"start":{"row":444,"column":0},"end":{"row":447,"column":14},"action":"remove","lines":["  ","","","  return total"],"id":5424}],[{"start":{"row":440,"column":2},"end":{"row":440,"column":4},"action":"insert","lines":["  "],"id":5425}],[{"start":{"row":440,"column":4},"end":{"row":440,"column":5},"action":"insert","lines":["r"],"id":5426}],[{"start":{"row":440,"column":5},"end":{"row":440,"column":6},"action":"insert","lines":["e"],"id":5427}],[{"start":{"row":440,"column":6},"end":{"row":440,"column":7},"action":"insert","lines":["t"],"id":5428}],[{"start":{"row":440,"column":7},"end":{"row":440,"column":8},"action":"insert","lines":["u"],"id":5429}],[{"start":{"row":440,"column":8},"end":{"row":440,"column":9},"action":"insert","lines":["r"],"id":5430}],[{"start":{"row":440,"column":9},"end":{"row":440,"column":10},"action":"insert","lines":["n"],"id":5431}],[{"start":{"row":440,"column":10},"end":{"row":440,"column":11},"action":"insert","lines":[" "],"id":5432}],[{"start":{"row":440,"column":11},"end":{"row":440,"column":12},"action":"insert","lines":["t"],"id":5433}],[{"start":{"row":440,"column":12},"end":{"row":440,"column":13},"action":"insert","lines":["o"],"id":5434}],[{"start":{"row":440,"column":13},"end":{"row":440,"column":14},"action":"insert","lines":["t"],"id":5435}],[{"start":{"row":440,"column":14},"end":{"row":440,"column":15},"action":"insert","lines":["a"],"id":5436}],[{"start":{"row":440,"column":15},"end":{"row":440,"column":16},"action":"insert","lines":["l"],"id":5437}],[{"start":{"row":439,"column":7},"end":{"row":440,"column":0},"action":"insert","lines":["",""],"id":5438},{"start":{"row":440,"column":0},"end":{"row":440,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":433,"column":0},"end":{"row":434,"column":4},"action":"remove","lines":["    room_info[\"room_flags\"]  = sum_piped( m[5].strip )","    "],"id":5439}],[{"start":{"row":435,"column":18},"end":{"row":435,"column":31},"action":"remove","lines":["piped_numbers"],"id":5440},{"start":{"row":435,"column":18},"end":{"row":435,"column":23},"action":"insert","lines":["flags"]}],[{"start":{"row":405,"column":0},"end":{"row":406,"column":22},"action":"remove","lines":["    ","    if m[5].match(/|/)"],"id":5441}],[{"start":{"row":405,"column":0},"end":{"row":406,"column":0},"action":"remove","lines":["",""],"id":5442}],[{"start":{"row":405,"column":0},"end":{"row":405,"column":2},"action":"remove","lines":["  "],"id":5443}],[{"start":{"row":405,"column":31},"end":{"row":405,"column":40},"action":"remove","lines":["sum_piped"],"id":5445},{"start":{"row":405,"column":31},"end":{"row":405,"column":32},"action":"insert","lines":["r"]}],[{"start":{"row":405,"column":32},"end":{"row":405,"column":33},"action":"insert","lines":["e"],"id":5446}],[{"start":{"row":405,"column":33},"end":{"row":405,"column":34},"action":"insert","lines":["a"],"id":5447}],[{"start":{"row":405,"column":34},"end":{"row":405,"column":35},"action":"insert","lines":["d"],"id":5448}],[{"start":{"row":405,"column":31},"end":{"row":405,"column":35},"action":"remove","lines":["read"],"id":5449},{"start":{"row":405,"column":31},"end":{"row":405,"column":41},"action":"insert","lines":["read_flags"]}],[{"start":{"row":406,"column":0},"end":{"row":409,"column":4},"action":"remove","lines":["    else","      room_info[\"room_flags\"]  = m[5].to_i","    end","    "],"id":5450}],[{"start":{"row":406,"column":0},"end":{"row":407,"column":0},"action":"remove","lines":["",""],"id":5451}],[{"start":{"row":413,"column":6},"end":{"row":413,"column":7},"action":"insert","lines":["#"],"id":5452}],[{"start":{"row":424,"column":0},"end":{"row":439,"column":3},"action":"remove","lines":["def read_flags( flags )","  ","  if flags.match(/|/)","","    total = 0","    number_list = flags.split(\"|\").map(&:strip)","    number_list.each do |number|","      total = total + number.to_i","    end","    ","    return total","  else","    return flags","  end","","end"],"id":5453}],[{"start":{"row":423,"column":0},"end":{"row":424,"column":0},"action":"remove","lines":["",""],"id":5454}],[{"start":{"row":422,"column":0},"end":{"row":423,"column":0},"action":"remove","lines":["",""],"id":5455}]]},"ace":{"folds":[],"scrolltop":5701,"scrollleft":0,"selection":{"start":{"row":399,"column":53},"end":{"row":399,"column":62},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":406,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1460846580267}