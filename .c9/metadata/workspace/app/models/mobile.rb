{"changed":true,"filter":false,"title":"mobile.rb","tooltip":"/app/models/mobile.rb","value":"class Mobile < ActiveRecord::Base\n  belongs_to :area\n  \n  has_many :specials, dependent: :destroy\n  has_many :shops, dependent: :destroy\n\n  include Bitfields\n\n  bitfield :act_flags,\n#               2**0 =>  :flag,          # Dec:          1 / Hex:         1\n                2**1 =>  :sentinel,      # Dec:          2 / Hex:         2\n                2**2 =>  :scavenger,     # Dec:          4 / Hex:         4\n                2**3 =>  :plant,         # Dec:          8 / Hex:         8\n#               2**4 =>  :flag,          # Dec:         16 / Hex:        10\n                2**5 =>  :aggressive,    # Dec:         32 / Hex:        20\n                2**6 =>  :stay_area,     # Dec:         64 / Hex:        40\n                2**7 =>  :wimpy,         # Dec:        128 / Hex:        80\n#               2**8 =>  :flag,          # Dec:        256 / Hex:       100\n                2**9 =>  :train,         # Dec:        512 / Hex:       200\n                2**10 => :practice,      # Dec:       1024 / Hex:       400\n                2**11 => :super_wimpy,   # Dec:       2048 / Hex:       800\n                2**12 => :assist_same,   # Dec:       4096 / Hex:      1000\n                2**13 => :assist,        # Dec:       8192 / Hex:      2000\n                2**14 => :assist_always, # Dec:      16384 / Hex:      4000\n                2**15 => :swim,          # Dec:      32768 / Hex:      8000\n                2**16 => :water_only,    # Dec:      65536 / Hex:     10000\n#               2**17 => :flag,          # Dec:     131072 / Hex:     20000\n                2**18 => :animal,        # Dec:     262144 / Hex:     40000\n                2**19 => :no_wear_eq,    # Dec:     524288 / Hex:     80000\n                2**20 => :no_corpse,     # Dec:    1048576 / Hex:    100000\n#               2**21 => :flag,          # Dec:    2097152 / Hex:    200000\n#               2**22 => :flag,          # Dec:    4194304 / Hex:    400000\n                2**23 => :fireproof,     # Dec:    8388608 / Hex:    800000\n                2**24 => :intelligent,   # Dec:   16777216 / Hex:   1000000\n#               2**25 => :flag,          # Dec:   33554432 / Hex:   2000000\n                2**26 => :cloaked,       # Dec:   67108864 / Hex:   4000000\n                2**27 => :no_random_eq   # Dec:  134217728 / Hex:   8000000\n#               2**28 => :flag,          # Dec:  268435456 / Hex:  10000000\n#               2**29 => :flag,          # Dec:  536870912 / Hex:  20000000\n#               2**30 => :flag,          # Dec: 1073741824 / Hex:  40000000\n#               2**31 => :flag,          # Dec: 2147483648 / Hex:  80000000\n#               2**32 => :flag,          # Dec: 4294967296 / Hex: 100000000\n\n  bitfield :affect_flags,\n                2**0 =>  :blind,               # Dec:          1 / Hex:         1\n                2**1 =>  :invisible,           # Dec:          2 / Hex:         2\n                2**2 =>  :detect_evil,         # Dec:          4 / Hex:         4\n                2**3 =>  :detect_invis,        # Dec:          8 / Hex:         8\n                2**4 =>  :detect_magic,        # Dec:         16 / Hex:        10\n                2**5 =>  :detect_hidden,       # Dec:         32 / Hex:        20\n                2**6 =>  :detect_good,         # Dec:         64 / Hex:        40\n                2**7 =>  :sanctuary,           # Dec:        128 / Hex:        80\n                2**8 =>  :faerie_fire,         # Dec:        256 / Hex:       100\n                2**9 =>  :infrared,            # Dec:        512 / Hex:       200\n                2**10 => :curse,               # Dec:       1024 / Hex:       400\n                2**11 => :no_steal,            # Dec:       2048 / Hex:       800\n                2**12 => :poison,              # Dec:       4096 / Hex:      1000\n                2**13 => :protect_from_evil,   # Dec:       8192 / Hex:      2000\n                2**14 => :protect_from_good,   # Dec:      16384 / Hex:      4000\n                2**15 => :sneak,               # Dec:      32768 / Hex:      8000\n                2**16 => :hide,                # Dec:      65536 / Hex:     10000\n                2**17 => :sleep,               # Dec:     131072 / Hex:     20000\n                2**18 => :charm,               # Dec:     262144 / Hex:     40000\n                2**19 => :flying,              # Dec:     524288 / Hex:     80000\n                2**20 => :passdoor,            # Dec:    1048576 / Hex:    100000\n                2**21 => :no_trace,            # Dec:    2097152 / Hex:    200000\n                2**22 => :no_sleep,            # Dec:    4194304 / Hex:    400000\n                2**23 => :no_summon,           # Dec:    8388608 / Hex:    800000\n                2**24 => :no_charm,            # Dec:   16777216 / Hex:   1000000\n#               2**25 => :flag,                # Dec:   33554432 / Hex:   2000000\n#               2**26 => :flag,                # Dec:   67108864 / Hex:   4000000\n                2**27 => :improved_invis       # Dec:  134217728 / Hex:   8000000\n#               2**28 => :flag,                # Dec:  268435456 / Hex:  10000000\n#               2**29 => :flag,                # Dec:  536870912 / Hex:  20000000\n#               2**30 => :flag,                # Dec: 1073741824 / Hex:  40000000\n#               2**31 => :flag,                # Dec: 2147483648 / Hex:  80000000\n#               2**32 => :flag,                # Dec: 4294967296 / Hex: 100000000\n  \n  bitfield :langs_known, \n                2**0 =>  :common,        # Dec:          1 / Hex:         1\n                2**1 =>  :dwarven,       # Dec:          2 / Hex:         2\n                2**2 =>  :elven,         # Dec:          4 / Hex:         4\n                2**3 =>  :gnomish,       # Dec:          8 / Hex:         8\n                2**4 =>  :halfling,      # Dec:         16 / Hex:        10\n                2**5 =>  :aarakocra,     # Dec:         32 / Hex:        20\n                2**6 =>  :giant,         # Dec:         64 / Hex:        40\n                2**7 =>  :minotaur,      # Dec:        128 / Hex:        80\n                2**8 =>  :ogre,          # Dec:        256 / Hex:       100\n                2**9 =>  :thoras,        # Dec:        512 / Hex:       200\n                2**10 => :goblin,        # Dec:       1024 / Hex:       400\n                2**11 => :drow,          # Dec:       2048 / Hex:       800\n                2**12 => :kobold,        # Dec:       4096 / Hex:      1000\n                2**13 => :orc,           # Dec:       8192 / Hex:      2000\n                2**14 => :troll,         # Dec:      16384 / Hex:      4000\n                2**15 => :sahaguin,      # Dec:      32768 / Hex:      8000\n                2**16 => :god            # Dec:      65536 / Hex:     10000\n\n  validates :vnum, :numericality => { only_integer: true,\n                                   greater_than_or_equal_to: 0,\n                                   :less_than => :max_vnum,\n                                   message: \"Can't exceed max allowable vnum.\"\n                                  },\n                   uniqueness:   { scope: :area,\n                                   message: \"No duplicate vnums allowed.\" }\n  validates :keywords, length: { in: 3..75 }, format: { with: /\\A[ -~]+\\z/, message: \"Only US-ASCII characters are permitted.\" }\n  validates :sdesc, length: { in: 4..75 }, format: { with: /\\A[ -~]+\\z/, message: \"Only US-ASCII characters are permitted.\" }\n  validates :ldesc, length: { in: 4..75 }, format: { with: /\\A[ -~]+\\z/, message: \"Only US-ASCII characters are permitted.\" }\n  validates :look_desc, length: { minimum: 4 }, format: { with: /\\A[\\x0A\\x0D -~]+\\z/, message: \"Only US-ASCII characters are permitted.\" }\n  validates :act_flags, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n  validates :affect_flags, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n  validates :alignment, numericality: { only_integer: true }  \n  validates :level, numericality: { only_integer: true, greater_than: 0 }\n  validates :sex, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n  validates :langs_known, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n  validates :lang_spoken, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n\n  before_create :default_values\n  def default_values\n    self.act_flags ||= 64\n    self.affect_flags ||= 0\n    self.alignment ||= 0\n    self.level ||= 1\n    self.sex ||= 0\n    self.langs_known ||= 0\n    self.lang_spoken ||= 0\n  end\n  \n  def next_mobile\n    $next_mobile = false # return self if no next mobile\n    x = self.vnum + 1\n    for i in x..self.area.vnum_qty\n      if self.area.mobiles.exists?(:vnum => i)\n        $next_mobile = self.area.mobiles.where(:vnum => i).first\n        break\n      end\n    end\n    return $next_mobile\n  end\n  \n  def last_mobile\n    $last_mobile = false # return self if no last mobile\n    i = self.vnum\n    until i < 0\n      i -= 1\n      if self.area.mobiles.exists?(:vnum => i)\n        $last_mobile = self.area.mobiles.where(:vnum => i).first\n        break\n      end\n    end\n    return $last_mobile\n  end\n\n  def max_vnum\n    area.vnum_qty\n  end\n  \n  def formal_vnum\n    (area.area_number * 100) + self.vnum\n  end\n\n  def vnum_and_sdesc\n    return  format(\"%03d\",self.vnum) + \" \" + self.sdesc\n  end\n  \n  def has_assoc_reset?\n    if self.area.resets.where(:reset_type => 'M', :val_2 => self.id).count > 0\n      return true\n    else\n      return false\n    end\n  end\n  \n  def sex_word\n    $sex = nil\n    $sex = 'none'    if self.sex == 0\n    $sex = 'male'    if self.sex == 1\n    $sex = 'female'  if self.sex == 2\n    return $sex\n  end\n  \n  def alignment_word\n    $alignment = nil\n    $alignment = 'evil'    if self.alignment == -1000\n    $alignment = 'unaligned'    if self.alignment == 0\n    $alignment = 'good'  if self.alignment == 1000\n    return $alignment\n  end\n\nend\n\ndef lang_from_num(i)\n  $lang = nil\n  $lang = 'NONE'    if i == 0\n  $lang = 'COMMON'    if i == 1\n  $lang = 'DWARVEN'   if i == 2\n  $lang = 'ELVEN'     if i == 4\n  $lang = 'GNOMISH'   if i == 8\n  $lang = 'HALFLING'  if i == 16\n  $lang = 'AARAKOCRA' if i == 32\n  $lang = 'GIANT'     if i == 64\n  $lang = 'MINOTAUR'  if i == 128\n  $lang = 'OGRE'      if i == 256\n  $lang = 'THORAS'    if i == 512\n  $lang = 'GOBLIN'    if i == 1024\n  $lang = 'DROW'      if i == 2048\n  $lang = 'KOBOLD'    if i == 4096\n  $lang = 'ORC'       if i == 8192\n  $lang = 'TROLL'     if i == 16384\n  $lang = 'SAHAGUIN'  if i == 32768\n  $lang = 'GOD'       if i == 65535\n  return $lang.upcase\nend","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":107,"column":68},"end":{"row":107,"column":76},"action":"insert","lines":["\\x0A\\x0D"]}]}]]},"ace":{"folds":[],"scrolltop":1224.5,"scrollleft":0,"selection":{"start":{"row":107,"column":76},"end":{"row":107,"column":76},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":86,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1425187878457}