{"changed":true,"filter":false,"title":"obj.rb","tooltip":"/app/models/obj.rb","value":"class Obj < ActiveRecord::Base\n  belongs_to :area\n  has_many :oxdescs, dependent: :destroy\n  has_many :applies, dependent: :destroy\n\n  include Bitfields\n\n  bitfield :wear_flags, \n                    2**0 =>  :takeable,      # Dec:          1 / Hex:         1\n                    2**1 =>  :finger,        # Dec:          2 / Hex:         2\n                    2**2 =>  :neck,          # Dec:          4 / Hex:         4\n                    2**3 =>  :body,          # Dec:          8 / Hex:         8\n                    2**4 =>  :head,          # Dec:         16 / Hex:        10\n                    2**5 =>  :legs,          # Dec:         32 / Hex:        20\n                    2**6 =>  :feet,          # Dec:         64 / Hex:        40\n                    2**7 =>  :hands,         # Dec:        128 / Hex:        80\n                    2**8 =>  :arms,          # Dec:        256 / Hex:       100\n                    2**9 =>  :shield,        # Dec:        512 / Hex:       200\n                    2**10 => :about,         # Dec:       1024 / Hex:       400\n                    2**11 => :waist,         # Dec:       2048 / Hex:       800\n                    2**12 => :wrist,         # Dec:       4096 / Hex:      1000\n                    2**13 => :wield,         # Dec:       8192 / Hex:      2000\n                    2**14 => :hold,          # Dec:      16384 / Hex:      4000\n                    2**15 => :decoration     # Dec:      32768 / Hex:      8000\n\n  bitfield :extra_flags, \n                    2**0 =>  :glow,          # Dec:          1 / Hex:         1\n                    2**1 =>  :hum,           # Dec:          2 / Hex:         2\n#                   2**2 =>  :flag,          # Dec:          4 / Hex:         4\n#                   2**3 =>  :flag,          # Dec:          8 / Hex:         8\n                    2**4 =>  :evil,          # Dec:         16 / Hex:        10\n                    2**5 =>  :invis,         # Dec:         32 / Hex:        20\n                    2**6 =>  :magic,         # Dec:         64 / Hex:        40\n                    2**7 =>  :nodrop,        # Dec:        128 / Hex:        80\n#                   2**8 =>  :flag,          # Dec:        256 / Hex:       100\n                    2**9 =>  :anti_good,     # Dec:        512 / Hex:       200\n                    2**10 => :anti_evil,     # Dec:       1024 / Hex:       400\n                    2**11 => :anti_neutral,  # Dec:       2048 / Hex:       800\n                    2**12 => :noremove,      # Dec:       4096 / Hex:      1000\n                    2**13 => :inventory,     # Dec:       8192 / Hex:      2000\n                    2**14 => :metallic,      # Dec:      16384 / Hex:      4000\n                    2**15 => :good,          # Dec:      32768 / Hex:      8000\n#                   2**16 => :flag,          # Dec:      65536 / Hex:     10000\n                    2**17 => :not_purgable,  # Dec:     131072 / Hex:     20000\n                    2**18 => :flammable,     # Dec:     262144 / Hex:     40000\n                    2**19 => :two_handed,    # Dec:     524288 / Hex:     80000\n#                   2**20 => :flag,          # Dec:    1048576 / Hex:    100000\n                    2**21 => :use_cost,      # Dec:    2097152 / Hex:    200000\n#                   2**22 => :flag,          # Dec:    4194304 / Hex:    400000\n#                   2**23 => :flag,          # Dec:    8388608 / Hex:    800000\n#                   2**24 => :flag,          # Dec:   16777216 / Hex:   1000000\n                    2**25 => :anti_unalign,  # Dec:   33554432 / Hex:   2000000\n#                   2**26 => :flag,          # Dec:   67108864 / Hex:   4000000\n#                   2**27 => :flag,          # Dec:  134217728 / Hex:   8000000\n                    2**28 => :neutral,        # Dec:  268435456 / Hex:  10000000\n                    2**29 => :no_hoard,      # Dec:  536870912 / Hex:  20000000\n                    2**30 => :masked        # Dec: 1073741824 / Hex:  40000000\n#                   2**31 => :flag,          # Dec: 2147483648 / Hex:  80000000\n#                   2**32 => :flag           # Dec: 4294967296 / Hex: 100000000\n\n  bitfield :misc_flags, \n#                    2**0 =>  :flag,             # Dec:          1 / Hex:         1\n#                    2**1 =>  :flag,             # Dec:          2 / Hex:         2\n#                    2**2 =>  :flag,             # Dec:          4 / Hex:         4\n                    2**3 =>  :underwater_breath # Dec:          8 / Hex:         8\n\n  validates :vnum, :numericality => { only_integer: true,\n                                   greater_than_or_equal_to: 0,\n                                   :less_than => :max_vnum,\n                                   message: \"Can't exceed max allowable vnum.\"\n                                  },\n                   uniqueness:   { scope: :area,\n                                   message: \"No duplicate vnums allowed.\" }\n  validates :keywords, length: { in: 4..75 }, format: { with: /\\A[ -~]+\\z/, message: \"Only US-ASCII characters are permitted.\" }\n  validates :sdesc, length: { in: 4..75 }, format: { with: /\\A[ -~]+\\z/, message: \"Only US-ASCII characters are permitted.\" }\n  validates :ldesc, length: { minimum: 4 }, format: { with: /\\A[\\x0A\\x0D -~]+\\z/, message: \"Only US-ASCII characters are permitted.\" }\n  validates :object_type, numericality: { only_integer: true, greater_than: 0 }\n  validates :v0, numericality: { only_integer: true, greater_than: -2 }\n  validates :v1, numericality: { only_integer: true, greater_than: -2 }\n  validates :v2, numericality: { only_integer: true, greater_than: -2 }\n  validates :v3, numericality: { only_integer: true, greater_than: -2 }\n  validates :wear_flags, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n  validates :extra_flags, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n  validates :misc_flags, numericality: { only_integer: true, greater_than_or_equal_to: 0 }\n\n  before_create :default_values\n  def default_values\n    self.v0 ||= 0\n    self.v1 ||= 0\n    self.v2 ||= 0\n    self.v3 ||= 0\n    self.extra_flags ||= 0\n    self.wear_flags ||= 1\n    self.misc_flags ||= 0\n    self.weight ||= 0\n    self.cost ||= 0\n  end\n  \n  def next_obj\n    $next_obj = false # return self if no next obj\n    x = self.vnum + 1\n    for i in x..self.area.vnum_qty\n      if self.area.objs.exists?(:vnum => i)\n        $next_obj = self.area.objs.where(:vnum => i).first\n        break\n      end\n    end\n    return $next_obj\n  end\n  \n  def last_obj\n    $last_obj = false # return self if no last obj\n    i = self.vnum\n    until i < 0\n      i -= 1\n      if self.area.objs.exists?(:vnum => i)\n        $last_obj = self.area.objs.where(:vnum => i).first\n        break\n      end\n    end\n    return $last_obj\n  end\n\n  def max_vnum\n    area.vnum_qty\n  end\n  \n  def formal_vnum\n    (area.area_number * 100) + self.vnum\n  end\n\n  def vnum_and_sdesc\n    return  format(\"%03d\",self.vnum) + \" \" + self.sdesc\n  end\n\n  def wear_location\n    $wear_loc = nil\n    $wear_loc = 'NOT WORN / LIGHT' if self.wear_flags < 2\n    $wear_loc = 'FINGER' if self.finger?\n    $wear_loc = 'NECK' if self.neck?\n    $wear_loc = 'BODY' if self.body?\n    $wear_loc = 'HEAD' if self.head?\n    $wear_loc = 'LEGS' if self.legs?\n    $wear_loc = 'FEET' if self.feet?\n    $wear_loc = 'HANDS' if self.hands?\n    $wear_loc = 'ARMS' if self.arms?\n    $wear_loc = 'SHIELD' if self.shield?\n    $wear_loc = 'ABOUT' if self.about?\n    $wear_loc = 'WAIST' if self.waist?\n    $wear_loc = 'WRIST' if self.wrist?\n    $wear_loc = 'WIELDED' if self.wield?\n    $wear_loc = 'HOLD' if self.hold?\n    $wear_loc = 'DECORATION' if self.decoration?\n    return $wear_loc    \n  end\n  \n  def type_word\n    return object_type_from_num( self.object_type )\n  end\n  \n  def has_assoc_reset?\n    i = false\n    i = true if ( self.area.resets.where(:reset_type => 'O', :val_2 => self.id).count > 0 )\n    i = true if ( self.area.sub_resets.where(:val_2 => self.id).count > 0 )\n    return i\n  end\n  \n  def has_applies_without_magic_flag?\n    if ( self.applies.count > 0 && !self.magic )\n      return true\n    else\n      return false\n    end\n  end\n\nend\n\n\ndef spell_from_num(i)\n  $spell = nil\n  $spell = 'None' if i == 0\n  $spell = 'Acid Blast' if i == 70\n  $spell = 'Alarm' if i == 48\n  $spell = 'Animate Dead' if i == 97\n  $spell = 'Armor' if i == 1\n  $spell = 'Attunement' if i == 125\n  $spell = 'Bear Totem' if i == 127\n  $spell = 'Bless' if i == 3\n  $spell = 'Blindness' if i == 4\n  $spell = 'Boar Totem' if i == 126\n  $spell = 'Burning Hands' if i == 5\n  $spell = 'Call Lightning' if i == 6\n  $spell = 'Cause Critical Wounds' if i == 63\n  $spell = 'Cause Disease' if i == 105\n  $spell = 'Cause Light Wounds' if i == 62\n  $spell = 'Cause Serious Wounds' if i == 64\n  $spell = 'Change Sex' if i == 82\n  $spell = 'Charm Person' if i == 7\n  $spell = 'Chill Touch' if i == 8\n  $spell = 'Cloak of Protection' if i == 118\n  $spell = 'Colour Spray' if i == 10\n  $spell = 'Comprehend' if i == 46\n  $spell = 'Confusion' if i == 113\n  $spell = 'Continual Light' if i == 57\n  $spell = 'Control Weather' if i == 11\n  $spell = 'Create Food' if i == 12\n  $spell = 'Create Spring' if i == 80\n  $spell = 'Create Water' if i == 13\n  $spell = 'Cure Blindness' if i == 14\n  $spell = 'Cure Critical Wounds' if i == 15\n  $spell = 'Cure Deafness' if i == 99\n  $spell = 'Cure Disease' if i == 104\n  $spell = 'Cure Light Wounds' if i == 16\n  $spell = 'Cure Mute' if i == 139\n  $spell = 'Cure Poison' if i == 43\n  $spell = 'Cure Serious Wounds' if i == 61\n  $spell = 'Curse' if i == 17\n  $spell = 'Darkness' if i == 86\n  $spell = 'Deafness' if i == 52\n  $spell = 'Detect Disease' if i == 117\n  $spell = 'Detect Evil' if i == 18\n  $spell = 'Detect Good' if i == 9\n  $spell = 'Detect Hidden' if i == 44\n  $spell = 'Detect Invisibility' if i == 19\n  $spell = 'Detect magic' if i == 20\n  $spell = 'Detect Poison' if i == 21\n  $spell = 'Dispel Evil' if i == 22\n  $spell = 'Dispel Good' if i == 37\n  $spell = 'Dispel Magic' if i == 59\n  $spell = 'Earthquake' if i == 23\n  $spell = 'Enchant Weapon' if i == 24\n  $spell = 'Energy Drain' if i == 25\n  $spell = 'Exclude' if i == 163\n  $spell = 'Faerie Fire' if i == 72\n  $spell = 'Faerie Fog' if i == 73\n  $spell = 'Fear' if i == 106\n  $spell = 'Fireball' if i == 26\n  $spell = 'Flamestrike' if i == 65\n  $spell = 'Fly' if i == 56\n  $spell = 'Gate a Vampire' if i == 83\n  $spell = 'Give Health' if i == 120\n  $spell = 'Give Mana' if i == 121\n  $spell = 'Give Moves' if i == 122\n  $spell = 'Hailstorm' if i == 134\n  $spell = 'Harm' if i == 27\n  $spell = 'Heal' if i == 28\n  $spell = 'Hurricane' if i == 135\n  $spell = 'Identify' if i == 53\n  $spell = 'Immunity' if i == 116\n  $spell = 'Improved Identify' if i == 55\n  $spell = 'Improved Invisibility' if i == 142\n  $spell = 'Infravision' if i == 77\n  $spell = 'Invisibility' if i == 29\n  $spell = 'Jump' if i == 47\n  $spell = 'Know Alignment' if i == 58\n  $spell = 'Lightning Bolt' if i == 30\n  $spell = 'Locate Object' if i == 31\n  $spell = 'Magic Missile' if i == 32\n  $spell = 'Magic Stone' if i == 131\n  $spell = 'Mass Invisibility' if i == 69\n  $spell = 'Meteor Swarm' if i == 95\n  $spell = 'Mute' if i == 138\n  $spell = 'Naturalize' if i == 95\n  $spell = 'Onset of Disease' if i == 115\n  $spell = 'Owl Totem' if i == 129\n  $spell = 'Pass Door' if i == 74\n  $spell = 'Pass Without Trace' if i == 100\n  $spell = 'Phosphate' if i == 124\n  $spell = 'Poison' if i == 33\n  $spell = 'Portal' if i == 88\n  $spell = 'Protection from Evil' if i == 34\n  $spell = 'Protection from Good' if i == 45\n  $spell = 'Quiet' if i == 108\n  $spell = 'Refresh' if i == 81\n  $spell = 'Remove Curse' if i == 35\n  $spell = 'Remove Fear' if i == 107\n  $spell = 'Rift Souls' if i == 119\n  $spell = 'Sanctuary' if i == 36\n  $spell = 'Shield' if i == 67\n  $spell = 'Shocking Grasp' if i == 51\n  $spell = 'Silence' if i == 112\n  $spell = 'Sleep' if i == 38\n  $spell = 'Soul Sense' if i == 123\n  $spell = 'Spiritual Hammer' if i == 132\n  $spell = 'Stone Skin' if i == 66\n  $spell = 'Strength' if i == 39\n  $spell = 'Summon' if i == 40\n  $spell = 'Sunlight' if i == 140\n  $spell = 'Survey' if i == 137\n  $spell = 'Teleport' if i == 2\n  $spell = 'Thunderclap' if i == 136\n  $spell = 'Tongues' if i == 98\n  $spell = 'True Seeing' if i == 103\n  $spell = 'Unicorn Totem' if i == 130\n  $spell = 'Vampiric Touch' if i == 85\n  $spell = 'Ventriloquate' if i == 41\n  $spell = 'Water Breathing' if i == 133\n  $spell = 'Weaken' if i == 68\n  $spell = 'Weasel Totem' if i == 128\n  $spell = 'Wizard Mark' if i == 49\n  $spell = 'Word of Recall' if i == 42\n  return $spell\nend\n\ndef liquid_type_from_num(i)\n  $liquid_type = nil\n  $liquid_type = 'Water (clear)' if i == 0\n  $liquid_type = 'Beer (amber)' if i == 1\n  $liquid_type = 'Wine (rose)' if i == 2\n  $liquid_type = 'Ale (brown)' if i == 3\n  $liquid_type = 'Darkale (dark)' if i == 4\n  $liquid_type = 'Whiskey (golden)' if i == 5\n  $liquid_type = 'Lemonade (pink)' if i == 6\n  $liquid_type = 'Firebreather (boiling)' if i == 7\n  $liquid_type = 'Local Specialty (everclear)' if i == 8\n  $liquid_type = 'Slime (green)' if i == 9\n  $liquid_type = 'Milk (white)' if i == 10\n  $liquid_type = 'Tea (tan)' if i == 11\n  $liquid_type = 'Coffee (black)' if i == 12\n  $liquid_type = 'Blood (red)' if i == 13\n  $liquid_type = 'Saltwater (clear)' if i == 14\n  $liquid_type = 'Mead (thick golden)' if i == 15\n  $liquid_type = 'Dew (clear yellow)' if i == 16\n  return $liquid_type\nend\n\ndef poison_yes_no(i)\n  $poison = nil\n  $poison = 'No' if i == 0\n  $poison = 'Yes' if i == 1\n  return $poison\nend\n\ndef damage_type_from_num(i)\n  $damage_type = nil\n  $damage_type = 'hits (blunt)' if i == 0\n  $damage_type = 'slices (sharp)' if i == 1\n  $damage_type = 'stabs (sharp, backstabs)' if i == 2\n  $damage_type = 'slashs (sharp)' if i == 3\n  $damage_type = 'whips (blunt)' if i == 4\n  $damage_type = 'claws (sharp)' if i == 5\n  $damage_type = 'blasts (blunt)' if i == 6\n  $damage_type = 'pounds (blunt)' if i == 7\n  $damage_type = 'crushs (blunt)' if i == 8\n  $damage_type = 'strikes (blunt)' if i == 9\n  $damage_type = 'bites (sharp)' if i == 10\n  $damage_type = 'pierces (sharp, backstabs)' if i == 11\n  $damage_type = 'smites (blunt)' if i == 12\n  return $damage_type\nend\n\ndef container_flags_from_num(i)\n  $container_flags = nil\n  $container_flags = 'Not Closeable' if i == 0\n  $container_flags = 'Closeable' if i == 1\n  $container_flags = 'Closed / Closeable' if i == 5\n  $container_flags = 'Locked / Closed / Closeable' if i == 13\n  $container_flags = 'Pickproof / Locked / Closed / Closeable' if i == 15\n  return $container_flags.upcase\nend\n\n","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":75,"column":64},"end":{"row":75,"column":72},"action":"insert","lines":["\\x0A\\x0D"]}]}]]},"ace":{"folds":[],"scrolltop":776.5,"scrollleft":0,"selection":{"start":{"row":75,"column":72},"end":{"row":75,"column":72},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":54,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1425187878507}